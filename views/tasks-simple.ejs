<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Taskmaster - <%= currentTag %></title>
  <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ðŸ“‹</text></svg>">
  <style>
    /* Reset and base */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #0a0a0a;
      color: #ffffff;
      line-height: 1.5;
      antialiased: true;
    }

    /* Header */
    .header {
      background: #111111;
      border-bottom: 1px solid #333333;
      padding: 1rem 0;
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .header-content {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .logo {
      font-size: 1.5rem;
      font-weight: 700;
      color: #ffffff;
      text-decoration: none;
    }

    .tag-info {
      display: flex;
      align-items: center;
      gap: 1rem;
      font-size: 0.9rem;
      color: #888888;
    }

    .current-tag {
      background: #1a73e8;
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-weight: 500;
    }

    /* Main layout */
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      display: grid;
      grid-template-columns: 320px 1fr;
      gap: 2rem;
      min-height: calc(100vh - 80px);
    }

    /* Sidebar */
    .sidebar {
      background: #111111;
      border: 1px solid #333333;
      border-radius: 12px;
      padding: 1.5rem;
      height: fit-content;
      position: sticky;
      top: 100px;
    }

    .sidebar-section {
      margin-bottom: 2rem;
      padding-bottom: 1.5rem;
      border-bottom: 1px solid #222222;
    }

    .sidebar-section:last-child {
      border-bottom: none;
      margin-bottom: 0;
    }

    .sidebar-title {
      font-size: 0.9rem;
      font-weight: 600;
      color: #cccccc;
      margin-bottom: 1rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .tag-selector {
      width: 100%;
      background: #1a1a1a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 0.75rem;
      color: white;
      font-size: 0.9rem;
    }

    .tag-selector:focus {
      outline: none;
      border-color: #1a73e8;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0.75rem;
    }

    .stat-card {
      background: #1a1a1a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 1rem;
      text-align: center;
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #ffffff;
    }

    .stat-label {
      font-size: 0.75rem;
      color: #888888;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-top: 0.25rem;
    }

    .filters-toggle {
      background: #1a1a1a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 0.75rem;
      color: white;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.2s;
    }

    .filters-toggle:hover {
      border-color: #1a73e8;
    }

    .filters-panel {
      margin-top: 1rem;
      background: #1a1a1a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 1rem;
      display: none;
    }

    .filters-panel.open {
      display: block;
    }

    /* Research Panel */
    .research-toggle {
      background: #1a1a1a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 0.75rem;
      color: white;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.2s;
    }

    .research-toggle:hover {
      border-color: #1a73e8;
    }

    .research-panel {
      margin-top: 1rem;
      background: #1a1a1a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 1rem;
      display: none;
    }

    .research-panel.open {
      display: block;
    }

    .research-category {
      margin-bottom: 1rem;
    }

    .research-category:last-child {
      margin-bottom: 0;
    }

    .research-category-title {
      font-size: 0.8rem;
      font-weight: 600;
      color: #cccccc;
      margin-bottom: 0.5rem;
      padding-bottom: 0.25rem;
      border-bottom: 1px solid #333333;
    }

    .research-links {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .research-link {
      padding: 0.4rem 0.6rem;
      background: #0a0a0a;
      border: 1px solid #333333;
      border-radius: 4px;
      color: #cccccc;
      text-decoration: none;
      font-size: 0.8rem;
      transition: all 0.2s;
      display: block;
    }

    .research-link:hover {
      background: #333333;
      color: white;
      border-color: #1a73e8;
    }

    .filter-group {
      margin-bottom: 1rem;
    }

    .filter-label {
      display: block;
      font-size: 0.8rem;
      color: #cccccc;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }

    .filter-select {
      width: 100%;
      background: #0a0a0a;
      border: 1px solid #333333;
      border-radius: 6px;
      padding: 0.5rem;
      color: white;
      font-size: 0.85rem;
    }

    /* Main content */
    .main-content {
      background: #111111;
      border: 1px solid #333333;
      border-radius: 12px;
      overflow: hidden;
    }

    .content-header {
      background: #1a1a1a;
      border-bottom: 1px solid #333333;
      padding: 1.5rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .content-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: #ffffff;
    }

    .view-controls {
      display: flex;
      gap: 0.5rem;
    }

    .toggle-label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: white;
      cursor: pointer;
      font-size: 0.9rem;
    }

    .toggle-label input[type="checkbox"] {
      width: 16px;
      height: 16px;
      accent-color: #1a73e8;
      cursor: pointer;
    }

    .toggle-text {
      user-select: none;
    }

    /* Task list */
    .task-list {
      padding: 0;
    }

    .task-item {
      border-bottom: 1px solid #222222;
      padding: 1.5rem 2rem;
      transition: all 0.2s;
      cursor: pointer;
    }

    .task-item:hover {
      background: #1a1a1a;
    }

    .task-item:last-child {
      border-bottom: none;
    }

    .task-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 0.75rem;
    }

    .task-title {
      font-size: 1rem;
      font-weight: 600;
      color: #ffffff;
      margin-bottom: 0.25rem;
    }

    .task-id {
      font-size: 0.8rem;
      color: #666666;
      font-family: 'Monaco', monospace;
    }

    .task-badges {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }

    .badge {
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .badge.status-pending { background: #ffa726; color: #000; }
    .badge.status-in-progress { background: #42a5f5; color: #000; }
    .badge.status-done { background: #66bb6a; color: #000; }
    .badge.status-cancelled { background: #ef5350; color: #fff; }
    .badge.status-deferred { background: #78909c; color: #fff; }

    .badge.priority-high { background: #ef5350; color: #fff; }
    .badge.priority-medium { background: #ffa726; color: #000; }
    .badge.priority-low { background: #66bb6a; color: #000; }

    .task-description {
      color: #cccccc;
      font-size: 0.9rem;
      margin-bottom: 0.75rem;
      line-height: 1.5;
    }

    .task-meta {
      display: flex;
      gap: 1rem;
      font-size: 0.8rem;
      color: #888888;
    }

    .task-dependencies {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .dependency-badge {
      background: #333333;
      color: #ffffff;
      padding: 0.2rem 0.5rem;
      border-radius: 4px;
      font-family: 'Monaco', monospace;
    }

    .task-content {
      cursor: pointer;
      margin-bottom: 1rem;
    }

    .task-details-preview {
      color: #aaaaaa;
      font-size: 0.85rem;
      margin-top: 0.5rem;
      font-family: 'Monaco', 'Menlo', monospace;
      line-height: 1.4;
    }

    .task-subtasks {
      margin-top: 1rem;
      padding: 1rem;
      border: 1px solid #333333;
      border-radius: 8px;
      background: #0a0a0a;
    }

    .subtasks-header {
      font-size: 0.9rem;
      font-weight: 600;
      color: #cccccc;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #333333;
    }

    .subtask-clickable {
      padding: 0.75rem;
      border: 1px solid #222222;
      border-radius: 6px;
      margin-bottom: 0.5rem;
      cursor: pointer;
      transition: all 0.2s;
      background: #111111;
    }

    .subtask-clickable:hover {
      background: #1a1a1a;
      border-color: #1a73e8;
    }

    .subtask-clickable:last-child {
      margin-bottom: 0;
    }

    .subtask-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.5rem;
    }

    .subtask-title {
      color: #ffffff;
      font-weight: 500;
      font-size: 0.9rem;
    }

    .subtask-preview {
      color: #aaaaaa;
      font-size: 0.8rem;
      line-height: 1.4;
    }

    .subtask-status {
      font-size: 0.7rem;
    }

    /* Task detail modal */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 1000;
    }

    .modal.open {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .modal-content {
      background: #111111;
      border: 1px solid #333333;
      border-radius: 12px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      position: relative;
    }

    .modal-header {
      background: #1a1a1a;
      border-bottom: 1px solid #333333;
      padding: 1.5rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .modal-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: #ffffff;
    }

    .close-btn {
      background: none;
      border: none;
      color: #888888;
      font-size: 1.5rem;
      cursor: pointer;
      padding: 0.5rem;
    }

    .close-btn:hover {
      color: #ffffff;
    }

    .modal-body {
      padding: 2rem;
    }

    .detail-section {
      margin-bottom: 2rem;
    }

    .detail-section h4 {
      font-size: 0.9rem;
      font-weight: 600;
      color: #cccccc;
      margin-bottom: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .detail-content {
      background: #0a0a0a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 1rem;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 0.85rem;
      line-height: 1.6;
      color: #cccccc;
      white-space: pre-wrap;
    }

    .subtask-details {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .subtask-detail-item {
      background: #0a0a0a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 1rem;
    }

    .subtask-detail-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.75rem;
    }

    .subtask-detail-title {
      font-weight: 600;
      color: #ffffff;
    }

    .subtask-detail-desc {
      font-size: 0.9rem;
      color: #cccccc;
      margin-bottom: 0.75rem;
      line-height: 1.5;
    }

    .subtask-detail-impl {
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 0.8rem;
      color: #aaaaaa;
      line-height: 1.5;
      white-space: pre-wrap;
      background: #050505;
      border: 1px solid #222222;
      border-radius: 4px;
      padding: 0.75rem;
    }

    /* Empty state */
    .empty-state {
      text-align: center;
      padding: 4rem 2rem;
      color: #666666;
    }

    .empty-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
    }

    /* Loading */
    .loading {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 4rem;
      color: #666666;
    }

    .spinner {
      width: 2rem;
      height: 2rem;
      border: 2px solid #333333;
      border-top: 2px solid #1a73e8;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-right: 1rem;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .error-message {
      text-align: center;
      padding: 2rem;
      color: #ff6b6b;
      background: #1a0e0e;
      border: 1px solid #4a1a1a;
      border-radius: 8px;
    }

    .error-message h4 {
      margin-bottom: 1rem;
      color: #ff6b6b;
    }

    .markdown-content {
      background: #0a0a0a;
      border: 1px solid #333333;
      border-radius: 8px;
      padding: 1.5rem;
      color: #cccccc;
      line-height: 1.6;
    }

    .markdown-content h1,
    .markdown-content h2,
    .markdown-content h3,
    .markdown-content h4,
    .markdown-content h5,
    .markdown-content h6 {
      color: #ffffff;
      margin: 1.5em 0 0.5em 0;
      border-bottom: 1px solid #333333;
      padding-bottom: 0.3em;
    }

    .markdown-content h1:first-child,
    .markdown-content h2:first-child,
    .markdown-content h3:first-child {
      margin-top: 0;
    }

    .markdown-content p {
      margin: 1em 0;
    }

    .markdown-content ul,
    .markdown-content ol {
      margin: 1em 0;
      padding-left: 2em;
    }

    .markdown-content li {
      margin: 0.5em 0;
    }

    .markdown-content code {
      background: #222222;
      border: 1px solid #444444;
      border-radius: 4px;
      padding: 0.2em 0.4em;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 0.9em;
    }

    .markdown-content pre {
      background: #111111;
      border: 1px solid #333333;
      border-radius: 6px;
      padding: 1em;
      overflow-x: auto;
      margin: 1em 0;
    }

    .markdown-content pre code {
      background: none;
      border: none;
      padding: 0;
    }

    .markdown-content blockquote {
      border-left: 4px solid #1a73e8;
      margin: 1em 0;
      padding-left: 1em;
      color: #aaaaaa;
      font-style: italic;
    }

    .markdown-content table {
      border-collapse: collapse;
      width: 100%;
      margin: 1em 0;
    }

    .markdown-content th,
    .markdown-content td {
      border: 1px solid #333333;
      padding: 0.5em;
      text-align: left;
    }

    .markdown-content th {
      background: #222222;
      font-weight: bold;
    }

    /* Footer */
    .footer {
      text-align: center;
      padding: 2rem;
      border-top: 1px solid #333333;
      background: #0a0a0a;
      margin-top: 2rem;
    }

    .footer p {
      margin: 0;
      color: #666666;
      font-size: 0.9rem;
    }

    .footer-link {
      color: #1a73e8;
      text-decoration: none;
      transition: color 0.2s;
    }

    .footer-link:hover {
      color: #4285f4;
      text-decoration: underline;
    }

    /* Responsive */
    @media (max-width: 1024px) {
      .container {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      
      .sidebar {
        position: static;
      }
    }

    @media (max-width: 768px) {
      .container {
        padding: 1rem;
      }
      
      .header-content {
        padding: 0 1rem;
        flex-direction: column;
        gap: 1rem;
      }
      
      .content-header {
        padding: 1rem;
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
      }
      
      .task-item {
        padding: 1rem;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <header class="header">
    <div class="header-content">
      <a href="/" class="logo">Taskmaster AI UI</a>
      <div class="tag-info">
        <span class="current-tag"><%= currentTag %></span>
        <span>Port: 3001</span>
        <span id="task-count">Loading...</span>
      </div>
    </div>
  </header>

  <!-- Main container -->
  <div class="container">
    <!-- Sidebar -->
    <aside class="sidebar">
      <!-- Tag selector -->
      <div class="sidebar-section">
        <div class="sidebar-title">Tags</div>
        <select id="tag-selector" class="tag-selector">
          <% availableTags.forEach(tag => { %>
            <option value="<%= tag %>" <%= tag === currentTag ? 'selected' : '' %>>
              <%= tag %>
            </option>
          <% }); %>
        </select>
      </div>

      <!-- Filters -->
      <div class="sidebar-section">
        <div class="sidebar-title">Filters</div>
        <div class="filters-toggle" onclick="toggleFilters()">
          <span>Show Filters</span>
          <span id="filter-icon">â–¼</span>
        </div>
        <div id="filters-panel" class="filters-panel">
          <div class="filter-group">
            <label class="filter-label">Status</label>
            <select id="status-filter" class="filter-select">
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="in-progress">In Progress</option>
              <option value="done">Done</option>
              <option value="cancelled">Cancelled</option>
              <option value="deferred">Deferred</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label class="filter-label">Priority</label>
            <select id="priority-filter" class="filter-select">
              <option value="all">All Priorities</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>

          <div class="filter-group">
            <label class="filter-label">Subtasks</label>
            <select id="subtasks-filter" class="filter-select">
              <option value="all">All Tasks</option>
              <option value="with">With Subtasks</option>
              <option value="without">Without Subtasks</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Statistics -->
      <div class="sidebar-section">
        <div class="sidebar-title">Statistics</div>
        <div id="stats-grid" class="stats-grid">
          <!-- Will be populated by JavaScript -->
        </div>
      </div>

      <!-- Research & Documents -->
      <div class="sidebar-section">
        <div class="sidebar-title">Research & Context</div>
        <div id="research-panel" class="research-panel open">
          <div class="research-category">
            <div class="research-category-title">ðŸ“„ PRD Documents</div>
            <div class="research-links">
              <a href="javascript:void(0)" onclick="showDocumentModal('/api/document/elizify-prd.txt', 'Main Elizify PRD')" class="research-link">Main Elizify PRD</a>
              <a href="javascript:void(0)" onclick="showDocumentModal('/api/document/elizify-v2-prd.txt', 'Elizify v2 PRD')" class="research-link">Elizify v2 PRD</a>
              <a href="javascript:void(0)" onclick="showDocumentModal('/api/document/elizify-swarm-research-prd.txt', 'Swarm Research PRD')" class="research-link">Swarm Research</a>
              <a href="javascript:void(0)" onclick="showDocumentModal('/api/document/multi-agent-research-prd.txt', 'Multi-Agent Research PRD')" class="research-link">Multi-Agent Research</a>
            </div>
          </div>
          <div class="research-category">
            <div class="research-category-title">ðŸ”¬ Research Files</div>
            <div class="research-links" id="research-files-list">
              <!-- Will be populated by JavaScript -->
            </div>
          </div>
          <div class="research-category">
            <div class="research-category-title">ðŸ“Š Reports</div>
            <div class="research-links">
              <a href="javascript:void(0)" onclick="showDocumentModal('/api/complexity-report', 'Complexity Analysis Report')" class="research-link">Complexity Analysis</a>
            </div>
          </div>
        </div>
      </div>
    </aside>

    <!-- Main content -->
    <main class="main-content">
      <div class="content-header">
        <h1 class="content-title">Tasks</h1>
        <div class="view-controls">
          <label class="toggle-label">
            <input type="checkbox" id="show-completed" onchange="toggleCompleted()">
            <span class="toggle-text">Show Completed Tasks</span>
          </label>
        </div>
      </div>

      <div id="task-content">
        <div class="loading">
          <div class="spinner"></div>
          <span>Loading tasks...</span>
        </div>
      </div>
    </main>
  </div>

  <!-- Footer -->
  <footer class="footer">
    <p>by <a href="https://bealers.com" target="_blank" class="footer-link">@bealers</a></p>
  </footer>

  <!-- Task detail modal -->
  <div id="task-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title" id="modal-title">Task Details</h2>
        <button class="close-btn" onclick="closeModal()">&times;</button>
      </div>
      <div class="modal-body" id="modal-body">
        <!-- Content will be populated by JavaScript -->
      </div>
    </div>
  </div>

  <script>
    // Global data
    const taskData = <%- JSON.stringify(tasksData) %>;
    const stateData = <%- JSON.stringify(stateData) %>;
    let currentTag = '<%= currentTag %>';
    let currentTasks = taskData[currentTag]?.tasks || [];
    let currentView = 'list';
    let filteredTasks = [...currentTasks];

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      applyFilters(); // Apply filters first to respect initial checkbox state
      setupEventListeners();
      updateTaskCount();
      loadResearchFiles();
    });

    function setupEventListeners() {
      // Tag selector
      document.getElementById('tag-selector').addEventListener('change', (e) => {
        window.location.href = `/?tag=${e.target.value}`;
      });

      // Filters
      ['status-filter', 'priority-filter', 'subtasks-filter'].forEach(id => {
        document.getElementById(id).addEventListener('change', applyFilters);
      });

      // Modal close
      document.addEventListener('click', (e) => {
        if (e.target.id === 'task-modal') closeModal();
      });
    }

    function toggleFilters() {
      const panel = document.getElementById('filters-panel');
      const icon = document.getElementById('filter-icon');
      
      if (panel.classList.contains('open')) {
        panel.classList.remove('open');
        icon.textContent = 'â–¼';
      } else {
        panel.classList.add('open');
        icon.textContent = 'â–²';
      }
    }



    async function loadResearchFiles() {
      try {
        const response = await fetch('/api/research-files');
        const files = await response.json();
        
        const container = document.getElementById('research-files-list');
        container.innerHTML = files.map(file => 
          `<a href="javascript:void(0)" onclick="showDocumentModal('/api/research/${encodeURIComponent(file.name)}', '${file.displayName}')" class="research-link">
            ${file.displayName}
          </a>`
        ).join('');
      } catch (error) {
        console.error('Failed to load research files:', error);
      }
    }

    function setView(view) {
      currentView = view;
      document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
      document.getElementById(view + '-view').classList.add('active');
      renderTasks();
    }

    function applyFilters() {
      const statusFilter = document.getElementById('status-filter').value;
      const priorityFilter = document.getElementById('priority-filter').value;
      const subtasksFilter = document.getElementById('subtasks-filter').value;
      const showCompleted = document.getElementById('show-completed').checked;

      filteredTasks = currentTasks.filter(task => {
        if (statusFilter !== 'all' && task.status !== statusFilter) return false;
        if (priorityFilter !== 'all' && task.priority !== priorityFilter) return false;
        
        if (subtasksFilter !== 'all') {
          const hasSubtasks = task.subtasks && task.subtasks.length > 0;
          if (subtasksFilter === 'with' && !hasSubtasks) return false;
          if (subtasksFilter === 'without' && hasSubtasks) return false;
        }
        
        if (!showCompleted && task.status === 'done') return false;
        
        return true;
      });

      renderTasks();
      updateStatistics();
    }

    function renderTasks() {
      const container = document.getElementById('task-content');
      
      if (filteredTasks.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">ðŸ“­</div>
            <h3>No tasks found</h3>
            <p>No tasks match the current filters for tag "${currentTag}"</p>
          </div>
        `;
        return;
      }

      const tasksHTML = filteredTasks.map(task => renderTask(task)).join('');
      container.innerHTML = `<div class="task-list">${tasksHTML}</div>`;
    }

    function renderTask(task) {
      const subtasksHTML = task.subtasks && task.subtasks.length > 0 
        ? `<div class="task-subtasks">
             <h4 class="subtasks-header">Subtasks (${task.subtasks.length})</h4>
             ${task.subtasks.map(subtask => `
               <div class="subtask-clickable" onclick="showSubtaskDetail(${task.id}, ${subtask.id})">
                 <div class="subtask-header">
                   <span class="subtask-title">${subtask.title}</span>
                   <span class="subtask-status badge status-${subtask.status}">${subtask.status}</span>
                 </div>
                 ${subtask.description ? `<div class="subtask-preview">${subtask.description.substring(0, 100)}${subtask.description.length > 100 ? '...' : ''}</div>` : ''}
               </div>
             `).join('')}
           </div>`
        : '';

      const dependenciesHTML = task.dependencies && task.dependencies.length > 0
        ? `<div class="task-dependencies">
             <span>Dependencies:</span>
             ${task.dependencies.map(dep => `<span class="dependency-badge">${dep}</span>`).join('')}
           </div>`
        : '';

      return `
        <div class="task-item">
          <div class="task-header" onclick="showTaskDetail(${task.id})">
            <div>
              <div class="task-title">${task.title}</div>
              <div class="task-id">ID: ${task.id}</div>
            </div>
            <div class="task-badges">
              <span class="badge status-${task.status}">${task.status}</span>
              <span class="badge priority-${task.priority}">${task.priority}</span>
            </div>
          </div>
          
          <div class="task-content" onclick="showTaskDetail(${task.id})">
            <div class="task-description">${task.description || 'No description'}</div>
            ${task.details ? `<div class="task-details-preview">${task.details.substring(0, 200)}${task.details.length > 200 ? '...' : ''}</div>` : ''}
          </div>
          
          <div class="task-meta">
            ${dependenciesHTML}
          </div>
          
          ${subtasksHTML}
        </div>
      `;
    }

    function showTaskDetail(taskId) {
      const task = currentTasks.find(t => t.id === taskId);
      if (!task) return;

      document.getElementById('modal-title').textContent = task.title;
      
      const modalBody = document.getElementById('modal-body');
      modalBody.innerHTML = `
        <div class="task-badges" style="margin-bottom: 2rem;">
          <span class="badge status-${task.status}">${task.status}</span>
          <span class="badge priority-${task.priority}">${task.priority}</span>
          <span class="badge">ID: ${task.id}</span>
        </div>
        
        ${task.description ? `
          <div class="detail-section">
            <h4>Description</h4>
            <div class="detail-content">${task.description}</div>
          </div>
        ` : ''}
        
        ${task.details ? `
          <div class="detail-section">
            <h4>Implementation Details</h4>
            <div class="detail-content">${task.details}</div>
          </div>
        ` : ''}
        
        ${task.testStrategy ? `
          <div class="detail-section">
            <h4>Test Strategy</h4>
            <div class="detail-content">${task.testStrategy}</div>
          </div>
        ` : ''}
        
        ${task.dependencies && task.dependencies.length > 0 ? `
          <div class="detail-section">
            <h4>Dependencies</h4>
            <div class="detail-content">${task.dependencies.join(', ')}</div>
          </div>
        ` : ''}
        
        ${task.subtasks && task.subtasks.length > 0 ? `
          <div class="detail-section">
            <h4>Subtasks (${task.subtasks.length})</h4>
            <div class="subtask-details">
              ${task.subtasks.map(st => `
                <div class="subtask-detail-item">
                  <div class="subtask-detail-header">
                    <span class="subtask-detail-title">${st.title}</span>
                    <span class="badge status-${st.status}">${st.status}</span>
                  </div>
                  ${st.description ? `<div class="subtask-detail-desc">${st.description}</div>` : ''}
                  ${st.details ? `<div class="subtask-detail-impl">${st.details}</div>` : ''}
                </div>
              `).join('')}
            </div>
          </div>
        ` : ''}
      `;
      
      document.getElementById('task-modal').classList.add('open');
    }

    function showSubtaskDetail(taskId, subtaskId) {
      const task = currentTasks.find(t => t.id === taskId);
      if (!task) return;
      
      const subtask = task.subtasks.find(st => st.id === subtaskId);
      if (!subtask) return;

      document.getElementById('modal-title').textContent = `${subtask.title} (Subtask ${task.id}.${subtask.id})`;
      
      const modalBody = document.getElementById('modal-body');
      modalBody.innerHTML = `
        <div class="task-badges" style="margin-bottom: 2rem;">
          <span class="badge status-${subtask.status}">${subtask.status}</span>
          <span class="badge">Parent: ${task.title}</span>
          <span class="badge">ID: ${task.id}.${subtask.id}</span>
        </div>
        
        ${subtask.description ? `
          <div class="detail-section">
            <h4>Description</h4>
            <div class="detail-content">${subtask.description}</div>
          </div>
        ` : ''}
        
        ${subtask.details ? `
          <div class="detail-section">
            <h4>Implementation Details</h4>
            <div class="detail-content">${subtask.details}</div>
          </div>
        ` : ''}
        
        ${subtask.dependencies && subtask.dependencies.length > 0 ? `
          <div class="detail-section">
            <h4>Dependencies</h4>
            <div class="detail-content">${subtask.dependencies.join(', ')}</div>
          </div>
        ` : ''}
      `;
      
      document.getElementById('task-modal').classList.add('open');
    }

    function showDocumentModal(url, title) {
      document.getElementById('modal-title').textContent = title;
      
      const modalBody = document.getElementById('modal-body');
      modalBody.innerHTML = `
        <div class="loading">
          <div class="spinner"></div>
          <span>Loading document...</span>
        </div>
      `;
      
      document.getElementById('task-modal').classList.add('open');
      
      fetch(url)
        .then(response => {
          const contentType = response.headers.get('content-type');
          return response.text().then(content => ({ content, contentType }));
        })
        .then(({ content, contentType }) => {
          // If content is HTML (rendered markdown), display as HTML
          if (contentType && contentType.includes('text/html')) {
            modalBody.innerHTML = `
              <div class="detail-section">
                <div class="markdown-content">${content}</div>
              </div>
            `;
          } else {
            // Display as plain text with pre-wrap
            modalBody.innerHTML = `
              <div class="detail-section">
                <div class="detail-content" style="white-space: pre-wrap;">${content}</div>
              </div>
            `;
          }
        })
        .catch(error => {
          modalBody.innerHTML = `
            <div class="error-message">
              <h4>Error Loading Document</h4>
              <p>Failed to load document: ${error.message}</p>
            </div>
          `;
        });
    }

    function toggleCompleted() {
      applyFilters();
    }

    function closeModal() {
      document.getElementById('task-modal').classList.remove('open');
    }

    function updateStatistics() {
      const tasks = filteredTasks;
      const total = tasks.length;
      const completed = tasks.filter(t => t.status === 'done').length;
      const inProgress = tasks.filter(t => t.status === 'in-progress').length;
      const pending = tasks.filter(t => t.status === 'pending').length;
      
      document.getElementById('stats-grid').innerHTML = `
        <div class="stat-card">
          <div class="stat-value">${total}</div>
          <div class="stat-label">Total</div>
        </div>
        <div class="stat-card">
          <div class="stat-value">${completed}</div>
          <div class="stat-label">Done</div>
        </div>
        <div class="stat-card">
          <div class="stat-value">${inProgress}</div>
          <div class="stat-label">Active</div>
        </div>
        <div class="stat-card">
          <div class="stat-value">${pending}</div>
          <div class="stat-label">Pending</div>
        </div>
      `;
    }

    function updateTaskCount() {
      document.getElementById('task-count').textContent = `${currentTasks.length} tasks`;
    }

    // Initial setup - start with empty array, will be populated by applyFilters()
    filteredTasks = [];
  </script>
</body>
</html> 